Terminals which are not used

   FLOAT


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID START declerations stmtlist END

    2 declerations: DECL declarlist cdecl
    3             | /* empty */

    4 declarlist: declarlist decl
    5           | decl

    6 decl: type COLON list SEMICOLON

    7 list: ID COMMA list
    8     | ID

    9 type: INT
   10     | REAL
   11     | STRING

   12 cdecl: FINAL type ID ASSIGNOP NUM SEMICOLON cdecl
   13      | /* empty */

   14 stmtlist: stmtlist stmt
   15         | /* empty */

   16 stmt: assignment_stmt
   17     | ID ASSIGNOP SENTENCE SEMICOLON
   18     | control_stmt
   19     | in_stmt
   20     | out_stmt
   21     | stmt_block

   22 out_stmt: OUT O_PARENTHESES expression C_PARENTHESES SEMICOLON
   23         | OUT O_PARENTHESES SENTENCE C_PARENTHESES SEMICOLON

   24 in_stmt: IN O_PARENTHESES ID C_PARENTHESES SEMICOLON

   25 assignment_stmt: ID ASSIGNOP expression SEMICOLON

   26 control_stmt: IF O_PARENTHESES boolexpr C_PARENTHESES THEN stmt ELSE stmt
   27             | WHILE O_PARENTHESES boolexpr C_PARENTHESES stmt_block
   28             | FOREACH ID ASSIGNOP NUM TILL NUM WITH step stmt
   29             | FOREACH ID ASSIGNOP NUM TILL ID WITH step stmt
   30             | switch

   31 stmt_block: O_BRACKET stmtlist C_BRACKET

   32 switch: SWITCH O_PARENTHESES ID C_PARENTHESES O_BRACKET cases C_BRACKET

   33 cases: CASE NUM COLON stmtlist BREAK SEMICOLON cases
   34      | DEFAULT COLON stmtlist

   35 step: ID ASSIGNOP ID ADDOP NUM
   36     | ID ASSIGNOP ID MULOP NUM

   37 boolexpr: boolexpr OROP boolterm
   38         | boolterm

   39 boolterm: boolterm ANDOP boolfactor
   40         | boolfactor

   41 boolfactor: EXCLAMATION O_PARENTHESES boolfactor C_PARENTHESES
   42           | expression RELOP expression

   43 expression: expression ADDOP term
   44           | term

   45 term: term MULOP factor
   46     | factor

   47 factor: O_PARENTHESES expression C_PARENTHESES
   48       | ID
   49       | NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
BREAK (258) 33
CASE (259) 33
FINAL (260) 12
DECL (261) 2
DEFAULT (262) 34
ELSE (263) 26
END (264) 1
FLOAT (265)
FOREACH (266) 28 29
IF (267) 26
IN (268) 24
INT (269) 9
OUT (270) 22 23
PROGRAM (271) 1
REAL (272) 10
START (273) 1
STRING (274) 11
SWITCH (275) 32
THEN (276) 26
TILL (277) 28 29
WHILE (278) 27
WITH (279) 28 29
COMMA (280) 7
COLON (281) 6 33 34
O_PARENTHESES (282) 22 23 24 26 27 32 41 47
C_PARENTHESES (283) 22 23 24 26 27 32 41 47
O_BRACKET (284) 31 32
C_BRACKET (285) 31 32
EXCLAMATION (286) 41
SEMICOLON (287) 6 12 17 22 23 24 25 33
ID (288) 1 7 8 12 17 24 25 28 29 32 35 36 48
SENTENCE (289) 17 23
NUM (290) 12 28 29 33 35 36 49
RELOP (291) 42
ADDOP (292) 35 43
MULOP (293) 36 45
ASSIGNOP (294) 12 17 25 28 29 35 36
OROP (295) 37
ANDOP (296) 39


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
declerations (44)
    on left: 2 3, on right: 1
declarlist (45)
    on left: 4 5, on right: 2 4
decl (46)
    on left: 6, on right: 4 5
list (47)
    on left: 7 8, on right: 6 7
type (48)
    on left: 9 10 11, on right: 6 12
cdecl (49)
    on left: 12 13, on right: 2 12
stmtlist (50)
    on left: 14 15, on right: 1 14 31 33 34
stmt (51)
    on left: 16 17 18 19 20 21, on right: 14 26 28 29
out_stmt (52)
    on left: 22 23, on right: 20
in_stmt (53)
    on left: 24, on right: 19
assignment_stmt (54)
    on left: 25, on right: 16
control_stmt (55)
    on left: 26 27 28 29 30, on right: 18
stmt_block (56)
    on left: 31, on right: 21 27
switch (57)
    on left: 32, on right: 30
cases (58)
    on left: 33 34, on right: 32 33
step (59)
    on left: 35 36, on right: 28 29
boolexpr (60)
    on left: 37 38, on right: 26 27 37
boolterm (61)
    on left: 39 40, on right: 37 38 39
boolfactor (62)
    on left: 41 42, on right: 39 40 41
expression (63)
    on left: 43 44, on right: 22 25 42 43 47
term (64)
    on left: 45 46, on right: 43 44 45
factor (65)
    on left: 47 48 49, on right: 45 46


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . ID START declerations stmtlist END

    ID  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: PROGRAM ID . START declerations stmtlist END

    START  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: PROGRAM ID START . declerations stmtlist END

    DECL  shift, and go to state 6

    $default  reduce using rule 3 (declerations)

    declerations  go to state 7


state 6

    2 declerations: DECL . declarlist cdecl

    INT     shift, and go to state 8
    REAL    shift, and go to state 9
    STRING  shift, and go to state 10

    declarlist  go to state 11
    decl        go to state 12
    type        go to state 13


state 7

    1 program: PROGRAM ID START declerations . stmtlist END

    $default  reduce using rule 15 (stmtlist)

    stmtlist  go to state 14


state 8

    9 type: INT .

    $default  reduce using rule 9 (type)


state 9

   10 type: REAL .

    $default  reduce using rule 10 (type)


state 10

   11 type: STRING .

    $default  reduce using rule 11 (type)


state 11

    2 declerations: DECL declarlist . cdecl
    4 declarlist: declarlist . decl

    FINAL   shift, and go to state 15
    INT     shift, and go to state 8
    REAL    shift, and go to state 9
    STRING  shift, and go to state 10

    $default  reduce using rule 13 (cdecl)

    decl   go to state 16
    type   go to state 13
    cdecl  go to state 17


state 12

    5 declarlist: decl .

    $default  reduce using rule 5 (declarlist)


state 13

    6 decl: type . COLON list SEMICOLON

    COLON  shift, and go to state 18


state 14

    1 program: PROGRAM ID START declerations stmtlist . END
   14 stmtlist: stmtlist . stmt

    END        shift, and go to state 19
    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    stmt             go to state 28
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 15

   12 cdecl: FINAL . type ID ASSIGNOP NUM SEMICOLON cdecl

    INT     shift, and go to state 8
    REAL    shift, and go to state 9
    STRING  shift, and go to state 10

    type  go to state 35


state 16

    4 declarlist: declarlist decl .

    $default  reduce using rule 4 (declarlist)


state 17

    2 declerations: DECL declarlist cdecl .

    $default  reduce using rule 2 (declerations)


state 18

    6 decl: type COLON . list SEMICOLON

    ID  shift, and go to state 36

    list  go to state 37


state 19

    1 program: PROGRAM ID START declerations stmtlist END .

    $default  reduce using rule 1 (program)


state 20

   28 control_stmt: FOREACH . ID ASSIGNOP NUM TILL NUM WITH step stmt
   29             | FOREACH . ID ASSIGNOP NUM TILL ID WITH step stmt

    ID  shift, and go to state 38


state 21

   26 control_stmt: IF . O_PARENTHESES boolexpr C_PARENTHESES THEN stmt ELSE stmt

    O_PARENTHESES  shift, and go to state 39


state 22

   24 in_stmt: IN . O_PARENTHESES ID C_PARENTHESES SEMICOLON

    O_PARENTHESES  shift, and go to state 40


state 23

   22 out_stmt: OUT . O_PARENTHESES expression C_PARENTHESES SEMICOLON
   23         | OUT . O_PARENTHESES SENTENCE C_PARENTHESES SEMICOLON

    O_PARENTHESES  shift, and go to state 41


state 24

   32 switch: SWITCH . O_PARENTHESES ID C_PARENTHESES O_BRACKET cases C_BRACKET

    O_PARENTHESES  shift, and go to state 42


state 25

   27 control_stmt: WHILE . O_PARENTHESES boolexpr C_PARENTHESES stmt_block

    O_PARENTHESES  shift, and go to state 43


state 26

   31 stmt_block: O_BRACKET . stmtlist C_BRACKET

    $default  reduce using rule 15 (stmtlist)

    stmtlist  go to state 44


state 27

   17 stmt: ID . ASSIGNOP SENTENCE SEMICOLON
   25 assignment_stmt: ID . ASSIGNOP expression SEMICOLON

    ASSIGNOP  shift, and go to state 45


state 28

   14 stmtlist: stmtlist stmt .

    $default  reduce using rule 14 (stmtlist)


state 29

   20 stmt: out_stmt .

    $default  reduce using rule 20 (stmt)


state 30

   19 stmt: in_stmt .

    $default  reduce using rule 19 (stmt)


state 31

   16 stmt: assignment_stmt .

    $default  reduce using rule 16 (stmt)


state 32

   18 stmt: control_stmt .

    $default  reduce using rule 18 (stmt)


state 33

   21 stmt: stmt_block .

    $default  reduce using rule 21 (stmt)


state 34

   30 control_stmt: switch .

    $default  reduce using rule 30 (control_stmt)


state 35

   12 cdecl: FINAL type . ID ASSIGNOP NUM SEMICOLON cdecl

    ID  shift, and go to state 46


state 36

    7 list: ID . COMMA list
    8     | ID .

    COMMA  shift, and go to state 47

    $default  reduce using rule 8 (list)


state 37

    6 decl: type COLON list . SEMICOLON

    SEMICOLON  shift, and go to state 48


state 38

   28 control_stmt: FOREACH ID . ASSIGNOP NUM TILL NUM WITH step stmt
   29             | FOREACH ID . ASSIGNOP NUM TILL ID WITH step stmt

    ASSIGNOP  shift, and go to state 49


state 39

   26 control_stmt: IF O_PARENTHESES . boolexpr C_PARENTHESES THEN stmt ELSE stmt

    O_PARENTHESES  shift, and go to state 50
    EXCLAMATION    shift, and go to state 51
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    boolexpr    go to state 54
    boolterm    go to state 55
    boolfactor  go to state 56
    expression  go to state 57
    term        go to state 58
    factor      go to state 59


state 40

   24 in_stmt: IN O_PARENTHESES . ID C_PARENTHESES SEMICOLON

    ID  shift, and go to state 60


state 41

   22 out_stmt: OUT O_PARENTHESES . expression C_PARENTHESES SEMICOLON
   23         | OUT O_PARENTHESES . SENTENCE C_PARENTHESES SEMICOLON

    O_PARENTHESES  shift, and go to state 50
    ID             shift, and go to state 52
    SENTENCE       shift, and go to state 61
    NUM            shift, and go to state 53

    expression  go to state 62
    term        go to state 58
    factor      go to state 59


state 42

   32 switch: SWITCH O_PARENTHESES . ID C_PARENTHESES O_BRACKET cases C_BRACKET

    ID  shift, and go to state 63


state 43

   27 control_stmt: WHILE O_PARENTHESES . boolexpr C_PARENTHESES stmt_block

    O_PARENTHESES  shift, and go to state 50
    EXCLAMATION    shift, and go to state 51
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    boolexpr    go to state 64
    boolterm    go to state 55
    boolfactor  go to state 56
    expression  go to state 57
    term        go to state 58
    factor      go to state 59


state 44

   14 stmtlist: stmtlist . stmt
   31 stmt_block: O_BRACKET stmtlist . C_BRACKET

    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    C_BRACKET  shift, and go to state 65
    ID         shift, and go to state 27

    stmt             go to state 28
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 45

   17 stmt: ID ASSIGNOP . SENTENCE SEMICOLON
   25 assignment_stmt: ID ASSIGNOP . expression SEMICOLON

    O_PARENTHESES  shift, and go to state 50
    ID             shift, and go to state 52
    SENTENCE       shift, and go to state 66
    NUM            shift, and go to state 53

    expression  go to state 67
    term        go to state 58
    factor      go to state 59


state 46

   12 cdecl: FINAL type ID . ASSIGNOP NUM SEMICOLON cdecl

    ASSIGNOP  shift, and go to state 68


state 47

    7 list: ID COMMA . list

    ID  shift, and go to state 36

    list  go to state 69


state 48

    6 decl: type COLON list SEMICOLON .

    $default  reduce using rule 6 (decl)


state 49

   28 control_stmt: FOREACH ID ASSIGNOP . NUM TILL NUM WITH step stmt
   29             | FOREACH ID ASSIGNOP . NUM TILL ID WITH step stmt

    NUM  shift, and go to state 70


state 50

   47 factor: O_PARENTHESES . expression C_PARENTHESES

    O_PARENTHESES  shift, and go to state 50
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    expression  go to state 71
    term        go to state 58
    factor      go to state 59


state 51

   41 boolfactor: EXCLAMATION . O_PARENTHESES boolfactor C_PARENTHESES

    O_PARENTHESES  shift, and go to state 72


state 52

   48 factor: ID .

    $default  reduce using rule 48 (factor)


state 53

   49 factor: NUM .

    $default  reduce using rule 49 (factor)


state 54

   26 control_stmt: IF O_PARENTHESES boolexpr . C_PARENTHESES THEN stmt ELSE stmt
   37 boolexpr: boolexpr . OROP boolterm

    C_PARENTHESES  shift, and go to state 73
    OROP           shift, and go to state 74


state 55

   38 boolexpr: boolterm .
   39 boolterm: boolterm . ANDOP boolfactor

    ANDOP  shift, and go to state 75

    $default  reduce using rule 38 (boolexpr)


state 56

   40 boolterm: boolfactor .

    $default  reduce using rule 40 (boolterm)


state 57

   42 boolfactor: expression . RELOP expression
   43 expression: expression . ADDOP term

    RELOP  shift, and go to state 76
    ADDOP  shift, and go to state 77


state 58

   44 expression: term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 78

    $default  reduce using rule 44 (expression)


state 59

   46 term: factor .

    $default  reduce using rule 46 (term)


state 60

   24 in_stmt: IN O_PARENTHESES ID . C_PARENTHESES SEMICOLON

    C_PARENTHESES  shift, and go to state 79


state 61

   23 out_stmt: OUT O_PARENTHESES SENTENCE . C_PARENTHESES SEMICOLON

    C_PARENTHESES  shift, and go to state 80


state 62

   22 out_stmt: OUT O_PARENTHESES expression . C_PARENTHESES SEMICOLON
   43 expression: expression . ADDOP term

    C_PARENTHESES  shift, and go to state 81
    ADDOP          shift, and go to state 77


state 63

   32 switch: SWITCH O_PARENTHESES ID . C_PARENTHESES O_BRACKET cases C_BRACKET

    C_PARENTHESES  shift, and go to state 82


state 64

   27 control_stmt: WHILE O_PARENTHESES boolexpr . C_PARENTHESES stmt_block
   37 boolexpr: boolexpr . OROP boolterm

    C_PARENTHESES  shift, and go to state 83
    OROP           shift, and go to state 74


state 65

   31 stmt_block: O_BRACKET stmtlist C_BRACKET .

    $default  reduce using rule 31 (stmt_block)


state 66

   17 stmt: ID ASSIGNOP SENTENCE . SEMICOLON

    SEMICOLON  shift, and go to state 84


state 67

   25 assignment_stmt: ID ASSIGNOP expression . SEMICOLON
   43 expression: expression . ADDOP term

    SEMICOLON  shift, and go to state 85
    ADDOP      shift, and go to state 77


state 68

   12 cdecl: FINAL type ID ASSIGNOP . NUM SEMICOLON cdecl

    NUM  shift, and go to state 86


state 69

    7 list: ID COMMA list .

    $default  reduce using rule 7 (list)


state 70

   28 control_stmt: FOREACH ID ASSIGNOP NUM . TILL NUM WITH step stmt
   29             | FOREACH ID ASSIGNOP NUM . TILL ID WITH step stmt

    TILL  shift, and go to state 87


state 71

   43 expression: expression . ADDOP term
   47 factor: O_PARENTHESES expression . C_PARENTHESES

    C_PARENTHESES  shift, and go to state 88
    ADDOP          shift, and go to state 77


state 72

   41 boolfactor: EXCLAMATION O_PARENTHESES . boolfactor C_PARENTHESES

    O_PARENTHESES  shift, and go to state 50
    EXCLAMATION    shift, and go to state 51
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    boolfactor  go to state 89
    expression  go to state 57
    term        go to state 58
    factor      go to state 59


state 73

   26 control_stmt: IF O_PARENTHESES boolexpr C_PARENTHESES . THEN stmt ELSE stmt

    THEN  shift, and go to state 90


state 74

   37 boolexpr: boolexpr OROP . boolterm

    O_PARENTHESES  shift, and go to state 50
    EXCLAMATION    shift, and go to state 51
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    boolterm    go to state 91
    boolfactor  go to state 56
    expression  go to state 57
    term        go to state 58
    factor      go to state 59


state 75

   39 boolterm: boolterm ANDOP . boolfactor

    O_PARENTHESES  shift, and go to state 50
    EXCLAMATION    shift, and go to state 51
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    boolfactor  go to state 92
    expression  go to state 57
    term        go to state 58
    factor      go to state 59


state 76

   42 boolfactor: expression RELOP . expression

    O_PARENTHESES  shift, and go to state 50
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    expression  go to state 93
    term        go to state 58
    factor      go to state 59


state 77

   43 expression: expression ADDOP . term

    O_PARENTHESES  shift, and go to state 50
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    term    go to state 94
    factor  go to state 59


state 78

   45 term: term MULOP . factor

    O_PARENTHESES  shift, and go to state 50
    ID             shift, and go to state 52
    NUM            shift, and go to state 53

    factor  go to state 95


state 79

   24 in_stmt: IN O_PARENTHESES ID C_PARENTHESES . SEMICOLON

    SEMICOLON  shift, and go to state 96


state 80

   23 out_stmt: OUT O_PARENTHESES SENTENCE C_PARENTHESES . SEMICOLON

    SEMICOLON  shift, and go to state 97


state 81

   22 out_stmt: OUT O_PARENTHESES expression C_PARENTHESES . SEMICOLON

    SEMICOLON  shift, and go to state 98


state 82

   32 switch: SWITCH O_PARENTHESES ID C_PARENTHESES . O_BRACKET cases C_BRACKET

    O_BRACKET  shift, and go to state 99


state 83

   27 control_stmt: WHILE O_PARENTHESES boolexpr C_PARENTHESES . stmt_block

    O_BRACKET  shift, and go to state 26

    stmt_block  go to state 100


state 84

   17 stmt: ID ASSIGNOP SENTENCE SEMICOLON .

    $default  reduce using rule 17 (stmt)


state 85

   25 assignment_stmt: ID ASSIGNOP expression SEMICOLON .

    $default  reduce using rule 25 (assignment_stmt)


state 86

   12 cdecl: FINAL type ID ASSIGNOP NUM . SEMICOLON cdecl

    SEMICOLON  shift, and go to state 101


state 87

   28 control_stmt: FOREACH ID ASSIGNOP NUM TILL . NUM WITH step stmt
   29             | FOREACH ID ASSIGNOP NUM TILL . ID WITH step stmt

    ID   shift, and go to state 102
    NUM  shift, and go to state 103


state 88

   47 factor: O_PARENTHESES expression C_PARENTHESES .

    $default  reduce using rule 47 (factor)


state 89

   41 boolfactor: EXCLAMATION O_PARENTHESES boolfactor . C_PARENTHESES

    C_PARENTHESES  shift, and go to state 104


state 90

   26 control_stmt: IF O_PARENTHESES boolexpr C_PARENTHESES THEN . stmt ELSE stmt

    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    stmt             go to state 105
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 91

   37 boolexpr: boolexpr OROP boolterm .
   39 boolterm: boolterm . ANDOP boolfactor

    ANDOP  shift, and go to state 75

    $default  reduce using rule 37 (boolexpr)


state 92

   39 boolterm: boolterm ANDOP boolfactor .

    $default  reduce using rule 39 (boolterm)


state 93

   42 boolfactor: expression RELOP expression .
   43 expression: expression . ADDOP term

    ADDOP  shift, and go to state 77

    $default  reduce using rule 42 (boolfactor)


state 94

   43 expression: expression ADDOP term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 78

    $default  reduce using rule 43 (expression)


state 95

   45 term: term MULOP factor .

    $default  reduce using rule 45 (term)


state 96

   24 in_stmt: IN O_PARENTHESES ID C_PARENTHESES SEMICOLON .

    $default  reduce using rule 24 (in_stmt)


state 97

   23 out_stmt: OUT O_PARENTHESES SENTENCE C_PARENTHESES SEMICOLON .

    $default  reduce using rule 23 (out_stmt)


state 98

   22 out_stmt: OUT O_PARENTHESES expression C_PARENTHESES SEMICOLON .

    $default  reduce using rule 22 (out_stmt)


state 99

   32 switch: SWITCH O_PARENTHESES ID C_PARENTHESES O_BRACKET . cases C_BRACKET

    CASE     shift, and go to state 106
    DEFAULT  shift, and go to state 107

    cases  go to state 108


state 100

   27 control_stmt: WHILE O_PARENTHESES boolexpr C_PARENTHESES stmt_block .

    $default  reduce using rule 27 (control_stmt)


state 101

   12 cdecl: FINAL type ID ASSIGNOP NUM SEMICOLON . cdecl

    FINAL  shift, and go to state 15

    $default  reduce using rule 13 (cdecl)

    cdecl  go to state 109


state 102

   29 control_stmt: FOREACH ID ASSIGNOP NUM TILL ID . WITH step stmt

    WITH  shift, and go to state 110


state 103

   28 control_stmt: FOREACH ID ASSIGNOP NUM TILL NUM . WITH step stmt

    WITH  shift, and go to state 111


state 104

   41 boolfactor: EXCLAMATION O_PARENTHESES boolfactor C_PARENTHESES .

    $default  reduce using rule 41 (boolfactor)


state 105

   26 control_stmt: IF O_PARENTHESES boolexpr C_PARENTHESES THEN stmt . ELSE stmt

    ELSE  shift, and go to state 112


state 106

   33 cases: CASE . NUM COLON stmtlist BREAK SEMICOLON cases

    NUM  shift, and go to state 113


state 107

   34 cases: DEFAULT . COLON stmtlist

    COLON  shift, and go to state 114


state 108

   32 switch: SWITCH O_PARENTHESES ID C_PARENTHESES O_BRACKET cases . C_BRACKET

    C_BRACKET  shift, and go to state 115


state 109

   12 cdecl: FINAL type ID ASSIGNOP NUM SEMICOLON cdecl .

    $default  reduce using rule 12 (cdecl)


state 110

   29 control_stmt: FOREACH ID ASSIGNOP NUM TILL ID WITH . step stmt

    ID  shift, and go to state 116

    step  go to state 117


state 111

   28 control_stmt: FOREACH ID ASSIGNOP NUM TILL NUM WITH . step stmt

    ID  shift, and go to state 116

    step  go to state 118


state 112

   26 control_stmt: IF O_PARENTHESES boolexpr C_PARENTHESES THEN stmt ELSE . stmt

    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    stmt             go to state 119
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 113

   33 cases: CASE NUM . COLON stmtlist BREAK SEMICOLON cases

    COLON  shift, and go to state 120


state 114

   34 cases: DEFAULT COLON . stmtlist

    $default  reduce using rule 15 (stmtlist)

    stmtlist  go to state 121


state 115

   32 switch: SWITCH O_PARENTHESES ID C_PARENTHESES O_BRACKET cases C_BRACKET .

    $default  reduce using rule 32 (switch)


state 116

   35 step: ID . ASSIGNOP ID ADDOP NUM
   36     | ID . ASSIGNOP ID MULOP NUM

    ASSIGNOP  shift, and go to state 122


state 117

   29 control_stmt: FOREACH ID ASSIGNOP NUM TILL ID WITH step . stmt

    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    stmt             go to state 123
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 118

   28 control_stmt: FOREACH ID ASSIGNOP NUM TILL NUM WITH step . stmt

    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    stmt             go to state 124
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 119

   26 control_stmt: IF O_PARENTHESES boolexpr C_PARENTHESES THEN stmt ELSE stmt .

    $default  reduce using rule 26 (control_stmt)


state 120

   33 cases: CASE NUM COLON . stmtlist BREAK SEMICOLON cases

    $default  reduce using rule 15 (stmtlist)

    stmtlist  go to state 125


state 121

   14 stmtlist: stmtlist . stmt
   34 cases: DEFAULT COLON stmtlist .

    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    $default  reduce using rule 34 (cases)

    stmt             go to state 28
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 122

   35 step: ID ASSIGNOP . ID ADDOP NUM
   36     | ID ASSIGNOP . ID MULOP NUM

    ID  shift, and go to state 126


state 123

   29 control_stmt: FOREACH ID ASSIGNOP NUM TILL ID WITH step stmt .

    $default  reduce using rule 29 (control_stmt)


state 124

   28 control_stmt: FOREACH ID ASSIGNOP NUM TILL NUM WITH step stmt .

    $default  reduce using rule 28 (control_stmt)


state 125

   14 stmtlist: stmtlist . stmt
   33 cases: CASE NUM COLON stmtlist . BREAK SEMICOLON cases

    BREAK      shift, and go to state 127
    FOREACH    shift, and go to state 20
    IF         shift, and go to state 21
    IN         shift, and go to state 22
    OUT        shift, and go to state 23
    SWITCH     shift, and go to state 24
    WHILE      shift, and go to state 25
    O_BRACKET  shift, and go to state 26
    ID         shift, and go to state 27

    stmt             go to state 28
    out_stmt         go to state 29
    in_stmt          go to state 30
    assignment_stmt  go to state 31
    control_stmt     go to state 32
    stmt_block       go to state 33
    switch           go to state 34


state 126

   35 step: ID ASSIGNOP ID . ADDOP NUM
   36     | ID ASSIGNOP ID . MULOP NUM

    ADDOP  shift, and go to state 128
    MULOP  shift, and go to state 129


state 127

   33 cases: CASE NUM COLON stmtlist BREAK . SEMICOLON cases

    SEMICOLON  shift, and go to state 130


state 128

   35 step: ID ASSIGNOP ID ADDOP . NUM

    NUM  shift, and go to state 131


state 129

   36 step: ID ASSIGNOP ID MULOP . NUM

    NUM  shift, and go to state 132


state 130

   33 cases: CASE NUM COLON stmtlist BREAK SEMICOLON . cases

    CASE     shift, and go to state 106
    DEFAULT  shift, and go to state 107

    cases  go to state 133


state 131

   35 step: ID ASSIGNOP ID ADDOP NUM .

    $default  reduce using rule 35 (step)


state 132

   36 step: ID ASSIGNOP ID MULOP NUM .

    $default  reduce using rule 36 (step)


state 133

   33 cases: CASE NUM COLON stmtlist BREAK SEMICOLON cases .

    $default  reduce using rule 33 (cases)
